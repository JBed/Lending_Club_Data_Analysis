z <- c(1:3,NA); ind <- is.na(z)
z
obj <- objects()
rm(obj)
print("asdf")
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
summary(x)
y<-1/x
s3 <- seq(-5, 5, by=.2)
temp <- x > 13
true <- x > 13
true
z <- c(1:3,NA); ind <- is.na(z)
z
log <- x > 13
log
z <- c(1:3,NA); ind <- is.na(z)
z
y <- x[!is.na(x)]
y
x[1:10]
digits <- as.character(z)
digits
e <- numeric()
e
e[3] <- 17
e
e[0:35]
labs <- paste(c("X","Y"), 1:10, sep="")
labs
attr(p, "dim") <- c(10,10)
attr(x, "dim") <- c(10,10)
attributes(object)
attributes(x)
x = 5
attributes(x)
"sa",  "act", "nsw", "vic", "vic", "act")
state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
"sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
"sa",  "act", "nsw", "vic", "vic", "act")
statef <- factor(state)
statef
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
incmeans <- tapply(incomes, statef, mean)
incmeans
dim(z) <- c(3,5,100)
z
dim(z) <- c(3,5,100)
z
dim(t) <- c(3,5,100)
t
d
dim(t) <- c(3,5,100)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])t
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a[2,,]
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a <- c(4,3,2)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a
x <- array(1:20, dim=c(4,5))
x
i <- array(c(1:3,3:1), dim=c(3,2))
x <- array(1:20, dim=c(4,5))
x
i <- array(c(1:3,3:1), dim=c(3,2))
i
x[i]
x[i] <- 0
x
Xb <- matrix(0, n, b)
Xb <- matrix(0, 4, 5)
Xb
ib <- cbind(1:n, blocks)
ib <- cbind(1:45, blocks)
ib <- cbind(1:45, 4)
ib
ib <- cbind(1:45, rand())
ib <- cbind(1:45, runif(1))
ib
Z <- array(3, dim=c(3,4,2))
Z
ab <- a %o% b
f <- function(x, y) cos(y)/(1 + x^2)
Lst <- list(name="Fred", wife="Mary", no.children=3,
child.ages=c(4,7,9))
Lst$name
Lst$wife
Lst$child.ages[1]
accountants <- data.frame(home=statef, loot=incomes, shot=incomef)
attach(faithful)
summary(eruptions)
fivenum(eruptions)
stem(eruptions)
obj <- objects()
obj
rm(obj)
attach(faithful)
summary(eruptions)
fivenum(eruptions)
stem(eruptions)
hist(eruptions)
hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE) > lines(density(eruptions, bw=0.1))
rug(eruptions)
plot(ecdf(eruptions), do.points=FALSE, verticals=TRUE)
A <- scan()
B <- scan()
library(randtoolbox)
halton(10, dim = 2, init = TRUE, normal = FALSE, usetime = FALSE)
install.packages(c("caret", "sandwich"))
install.packages("randtoolbox")
library(randtoolbox)
halton(10, dim = 2, init = TRUE, normal = FALSE, usetime = FALSE)
halton(10, dim = 1, init = TRUE, normal = FALSE, usetime = FALSE)
A<-halton(100, dim = 1, init = TRUE, normal = FALSE, usetime = FALSE)
b<-halton(100, dim = 1, init = TRUE, normal = FALSE, usetime = FALSE)
B<-halton(100, dim = 1, init = TRUE, normal = FALSE, usetime = FALSE)
B<-halton(100, dim = 1, init = TRUE, normal = TRUE, usetime = FALSE)
A<-halton(100, dim = 1, init = TRUE, normal = TRUE, usetime = FALSE)
A<-halton(100, dim = 1, init = TRUE, normal = FALSE, usetime = FALSE)
boxplot(A, B)
t.test(A, B)
var.test(A, B)
t.test(A, B, var.equal=TRUE)
wilcox.test(A, B)
plot(ecdf(A), do.points=FALSE, verticals=TRUE, xlim=range(A, B))
plot(ecdf(B), do.points=FALSE, verticals=TRUE, add=TRUE)
ks.test(A, B)
xc <- split(x, ind)
yc <- split(y, ind)
for (i in 1:length(yc)) {
plot(xc[[i]], yc[[i]])
abline(lsfit(xc[[i]], yc[[i]]))
}
obj <- objects()
obj
rm(obj)
Ax <- runif(100)
Bx <- runif(100)
Ax ~ Bx
y ~ A + x
Ax ~ Bx + x
lm(Ax~Bx)
olm <- lm(A~B)
A <- runif(100)
B <- runif(100)
C <- runif(100)
#The basic function for fitting ordinary multiple models is lm(),
#ordinary least squars
olm <- lm(A~B)
olm2 <- lm(A~B+C)
anova(A,B)
anova(olm,olm2)
coef(olm)
plot(olm)
plot(olm2)
predict(olm, newdata=data.frame)
print(olm)
step(olm)
summary(olm)
summary(olm2)
vcov(olm)
vcov(olm2)
predict(olm, newdata=randif(100))
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
source('~/.active-rstudio-document')
npk.aov <- aov(yield ~ block + N*P*K, npk)
(termL <- attr(terms(npk.aov), "term.labels"))
(pt <- predict(npk.aov, type = "terms"))
pt. <- predict(npk.aov, type = "terms", terms = termL[1:4])
stopifnot(all.equal(pt[,1:4], pt.,
tolerance = 1e-12, check.attributes = FALSE))
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(fit, interval = "prediction")
predict(wfit, interval = "prediction")
predict(wfit, new, interval = "prediction")
predict(wfit, new, interval = "prediction", weights = (new$x)^2)
predict(wfit, new, interval = "prediction", weights = ~x^2)
random <- cbind(runif(1000),runif(1000))
halton <- halton(1000, dim = 2, init = TRUE, normal = FALSE, usetime = FALSE)
par(mfrow=c(2,2))
plot(halton[,1],halton[,2])
plot(random[,1],random[,2])
obj <- objects()
obj
rm(obj)
a = c(65, 48, 66, 75, 70, 55)
b = c(64, 44, 70, 70, 68, 59)
c = c(60, 50, 65, 69, 69, 57)
d = c(62, 46, 68, 72, 67, 56)
dati = c(a, b, c, d)
groups = factor(rep(letters[1:4], each = 6))
#Analysis of variance and model comparison
fm05 <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = production)
fm6  <- update(fm05, . ~ . + x6)
smf6 <- update(fm6, sqrt(.) ~ .)
a = c(65, 48, 66, 75, 70, 55)
b = c(64, 44, 70, 70, 68, 59)
c = c(60, 50, 65, 69, 69, 57)
d = c(62, 46, 68, 72, 67, 56)
dati = c(a, b, c, d)
groups = factor(rep(letters[1:4], each = 6))
bartlett.test(dati, groups)
qchisq(0.950, 3)
a = c(65, 48, 66, 75, 70, 55)
b = c(64, 44, 70, 70, 68, 59)
c = c(60, 50, 65, 69, 69, 57)
d = c(62, 46, 68, 72, 67, 56)
dati = c(a, b, c, d)
groups = factor(rep(letters[1:4], each = 6))
fligner.test(dati, groups)
fit = lm(formula = dati ~ groups)
anova(fit)
x1 <- randif(100)
x2 <- randif(100)
fm <- glm(y ~ x1 + x2, family = gaussian, data = sales)
q()
install.packages("stringr")
install.packages("evaluate")
install.packages("formatR")
install.packages("pdflatex")
q()
devtools::install_github("rstudio/shinyapps")
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::deployApp()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
library(shiny)
library(ggplot2)
shinyapps::setAccountInfo(
name="jbedford",
token="610D5B65D9E73785B94F0FEACA3EF334",
secret="pPOXuZERpJ7Y3miscAcn8CG4AIrwPw7vzncmvIUR")
install.packages("highr")
install.packages("markdown")
q()
devtools::install_github("rstudio/rticles")
terminateApp("<your app's name>")
terminateApp("Desktop")
library(shinyapps)
terminateApp("Desktop")
q()
library(nycflights13)
install.packages("nycflights13")
install.packages("dplyr")
install.packages("ggvis")
install.packages("lubridate")
library(nycflights13)
library(dplyr)
library(ggvis)
library(lubridate)
daily <- flights %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(
delay = mean(dep_delay, na.rm = TRUE),
cancelled = mean(is.na(dep_delay))
)
daily_weather <- weather %>%
filter(origin == "EWR") %>%
group_by(year, month, day) %>%
summarise(
temp = mean(temp, na.rm = TRUE),
wind = mean(wind_speed, na.rm = TRUE),
precip = sum(precip, na.rm = TRUE)
)
both <- daily %>%
inner_join(daily_weather) %>%
ungroup() %>%
mutate(date = as.Date(ISOdate(year, month, day)))
both %>%
ggvis(x = ~temp, y = ~delay) %>%
layer_points() %>%
layer_smooths()
both %>%
ggvis(~temp, ~delay, fill = ~precip) %>%
layer_points()
both %>% ggvis(~delay) %>% layer_histograms()
both %>% ggvis(~delay)
both %>%
ggvis(~delay) %>%
layer_histograms(binwidth = input_slider(1, 10, value = 5))
ddat %>% ggvis(x = ~time, y = ~value, key := ~time) %>%
layer_points() %>%
layer_paths()
flights %>% ggvis(~dep_delay) %>%
layer_histograms(binwidth = input_slider(1, 10)) %>%
scale_numeric("x",
domain = input_slider(-100, 600, value = c(-100, 600)),
clamp = TRUE)
## Reactive data source 2: grand tour
library(tourr)
aps <- 2
fps <- 30
mat <- rescale(as.matrix(flea[1:6]))
tour <- new_tour(mat, grand_tour(), NULL)
start <- tour(0)
proj_data <- reactive({
invalidateLater(1000 / fps, NULL);
step <- tour(aps / fps)
data.frame(center(mat %*% step$proj), species = flea$species)
})
proj_data %>% ggvis(~X1, ~X2, fill = ~species) %>%
layer_points() %>%
scale_numeric("x", domain = c(-1, 1)) %>%
scale_numeric("y", domain = c(-1, 1)) %>%
add_axis("x", title = "") %>% add_axis("y", title = "") %>%
set_options(duration = 0)
terminateApp("<your app's name>")
library(devtools)
install_github('rCharts', 'ramnathv')
require(XML)
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
-7.5
0
7.5
15
2000
1990
1980
1970
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
rPlot(m1)
plot(m1)
mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line", "bubble", "scatter"), group = "Clap", size = "Age")
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
rPlot(map3)
plot(map3)
Leaflet$new()
Leaflet$new()$setView(c(51.505, -0.09), zoom = 13)
Leaflet$new()$setView(c(51.505, -0.09), zoom = 13)$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
Leaflet$new()$setView(c(51.505, -0.09), zoom = 13)$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
write(map3$print("chart7"), file = "~/Data.txt")
write(map3, file = "~/Data.txt")
sink("~/sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
unlink("sink-examp.txt")
cat(map3$print("chart7"), file = "~/Data.txt")
sink('~/analysis-output.txt')
cat(map3$print("chart7"), file = "~/Data.txt")
sink()
obesity = read.csv(
'http://www.stat.berkeley.edu/classes/s133/data/obesity.csv',
stringsAsFactors = F
)
names(obesity) = gsub("\\.", "_", names(obesity))
q()
install.packages(c("RTextTools","topicmodels"))
library(RTextTools)
library(topicmodels)
install.packages("topicmodels")
sessioninfo()
sessioninfo()
data(NYTimes)
data(cora.documents)
install.packages("lda")
data(cora.documents)
install.packages("topicmodels")
install.packages("gsl")
install.packages("~/Downloads/topicmodels_0.2-1.tar.gz",repos=NULL,type="source").
install.packages(~/Downloads/topicmodels_0.2-1.tar.gz,repos=NULL,type="source").
install.packages("/Users/jason/Downloads/topicmodels_0.2-1.tar.gz",repos=NULL,type="source").
install.packages("/Users/jason/Downloads/topicmodels_0.2-1.tar.gz",type="source").
install.packages("topicmodels")
install.packages('/Users/jason/Downloads/topicmodels_0.2-1.tar.gz',type="source").
install.packages('/Users/jason/Downloads/topicmodels_0.2-1.tar.gz',type="source")
library(topicmodels)
library(topicmodels)
library(RTextTools)
install.packages('/Users/jason/Downloads/topicmodels_0.2-1.tar.gz',type="source")
###Now get to work
install.packages("RTextTools")
install.packages("install.packages("RTextTools")")
install.packages("lda")
data(cora.documents)
data(cora.vocab)
data(cora.cites)
data(cora.titles)
library(lda)
text <- scan("http://www.gutenberg.org/cache/epub/2701/pg2701.txt", what = "character",
sep = "\n")
class(text)  # text is a character vector
head(text)
head(text)
novel <- paste(novel.lines, collapse = " ")
length(novel)
novel.lines <- text[start:(end - 1)]  # why the -1
novel <- paste(novel.lines, collapse = " ")
novel.lines <- text[start:(end - 1)]  # why the -1
start <- 408
end <- 18577
novel.lines <- text[start:(end - 1)]  # why the -1
novel <- paste(novel.lines, collapse = " ")
length(novel)
novel.lower <- tolower(novel)
moby.words <- strsplit(novel.lower, "\\W")
moby.word.vector <- unlist(moby.words)
chunk.size <- 1000  # set a chunk variable
num.chunks <- length(moby.word.vector)/chunk.size
mywhich <- function(word.vector, stoplist) {
word.vector[!(word.vector %in% stoplist)]
}
doclines <- lexicalize(chunk.vector)
set.seed(8675309)  # Jenny's number
K <- 5
num.iterations <- 250
result <- lda.collapsed.gibbs.sampler(doclines$documents, K, doclines$vocab,
num.iterations, 0.1, 0.1, compute.log.likelihood = TRUE)
chunk.vector <- unlist(chunks.as.strings)
chunks.as.strings <- lapply(chunks, paste, collapse = " ")
chunk.size <- 1000  # set a chunk variable
num.chunks <- length(moby.word.vector)/chunk.size
num.chunks
## [1] 214.9
x <- seq_along(moby.word.vector)
# create a list where each item is a chunk vector
chunks <- split(moby.word.vector, ceiling(x/chunk.size))
# What have we done here? ceiling is a rounding function.
chunks.as.strings <- lapply(chunks, paste, collapse = " ")
chunk.vector <- unlist(chunks.as.strings)
doclines <- lexicalize(chunk.vector)
set.seed(8675309)  # Jenny's number
K <- 5
result <- lda.collapsed.gibbs.sampler(doclines$documents, K, doclines$vocab, num.iterations, 0.1, 0.1, compute.log.likelihood = TRUE)
top.words <- top.topic.words(result$topics, 25, by.score = TRUE)
# let's see what we've got
print(top.words)
install.packages("wordcloud")
library(wordcloud)
i <- 1
cloud.data <- sort(result$topics[i, ], decreasing = TRUE)[1:50]
wordcloud(names(cloud.data), freq = cloud.data, scale = c(4, 0.1), min.freq = 1, rot.per = 0, random.order = FALSE)
i <- 4
cloud.data <- sort(result$topics[i, ], decreasing = TRUE)[1:50]
wordcloud(names(cloud.data), freq = cloud.data, scale = c(4, 0.1), min.freq = 1, rot.per = 0, random.order = FALSE)
q()
setwd("~/2.Github/2.DataSci_Repos/1.Lending_Club/Lending_Club_Data_Analysis/test.data")
loans <- read.csv("small.csv", header=TRUE, stringsAsFactors=TRUE, skip=1)
#make the factors
loans$term <- as.factor(loans$term)
loans$int_rate <- as.factor(loans$int_rate)
loans$grade <- as.factor(loans$grade)
loans$sub_grade <- as.factor(loans$sub_grade)
loans$home_ownership <- as.factor(loans$home_ownership)
loans$loan_status <- as.factor(loans$loan_status)
loans$purpose <- as.factor(loans$purpose)
is.factor(loans$is_inc_v) #stringsAsFactor worked
loans$sub_grade <- as.factor(loans$sub_grade)
loans$grade <- as.factor(loans$grade)
summary(loans$last_fico_range_high)
summary(loans$loan_status)
summary(loans$current)
summary(loans$term)
vector <-1
for (i in seq(loans$loan_status)) {
if (loans$loan_status[i] == "Current") {
vector[i]<- 1
}
else{
vector[i]<- 0
}
}
summary(as.factor(vector))
loans$current <- as.factor(vector)
yreg <- cbind(loans$loan_amnt,loans$term,loans$last_fico_range_high,loans$installment,loans$home_ownership,loans$annual_inc,loans$is_inc_v)
x <- data.matrix(loans$current)
y <- data.matrix(yreg)
library(glmnet)
fit1=glmnet(y,x , family = "binomial")
plot(fit1, xvar = "dev", label = TRUE)
cvfit = cv.glmnet(y, x, family = "binomial", type.measure = "class")
plot(cvfit)
q()
